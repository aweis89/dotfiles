set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

bind R source-file ~/.config/tmux/tmux.conf \; display-message "Tmux reloaded!"

set -g default-shell /bin/zsh
set -g default-command "exec /bin/zsh"

# use 'C-a' as prefix
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.local/share/tmux'

# self install plugin manager and plugins on first startup
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

set -g @plugin "loichyan/tmux-toggle-popup"
set -g @popup-toggle-mode 'force-close'

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'rickstaa/tmux-notimy'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @open 'o'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'schasse/tmux-jump'
set -g @jump-key 'a'
set -g allow-rename off

# vi mode
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection

set -g base-index 1
set -g renumber-windows on

run-shell 'if [ "$(defaults read -g AppleInterfaceStyle 2>/dev/null)" = "Dark" ];'\
'then tmux set -g @tmux-gruvbox "dark";'\
'else tmux set -g @tmux-gruvbox "light"; fi'

set -g @plugin 'tmux-plugins/tmux-sensible' # optional recommended

set -g @plugin 'TanglingTreats/tmux-everforest'
run-shell 'if [ "$(defaults read -g AppleInterfaceStyle 2>/dev/null)" = "Dark" ];'\
'then tmux set -g @tmux-everforest "dark-medium-xterm";'\
'else tmux set -g @tmux-everforest "light-medium-xterm"; fi'
# set -g @tmux-everforest "light-medium-xterm"

run '~/.tmux/plugins/tpm/tpm'

set -g status-left ""
set -g status-right ""

setw -g word-separators ' @"=()[]/.'

# Function to handle tmux splits while respecting Neovim context
bind-key - run-shell '\
  current_command="$(tmux display-message -p "#{pane_current_command}")"; \
  if [ "$current_command" = "nvim" ]; then \
    if [ "$(tmux display-message -p "#{pane_current_path}" | grep "term://")" != "" ]; then \
      tmux split-window -v -c "#{pane_current_path}"; \
    else \
      tmux send-keys Escape ":TmuxSplitV" Enter; \
    fi; \
  else \
    tmux split-window -v -c "#{pane_current_path}"; \
  fi'

bind-key \\ run-shell '\
  current_command="$(tmux display-message -p "#{pane_current_command}")"; \
  if [ "$current_command" = "nvim" ]; then \
    if [ "$(tmux display-message -p "#{pane_current_path}" | grep "term://")" != "" ]; then \
      tmux split-window -h -c "#{pane_current_path}"; \
    else \
      tmux send-keys Escape ":TmuxSplitH" Enter; \
    fi; \
  else \
    tmux split-window -h -c "#{pane_current_path}"; \
  fi'

bind r respawn-pane -k "zsh"

# add mouse scroll
setw -g mouse on

# panes navigation
bind ^ last-window
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# panes sizing
bind -r H resize-pane -L 10
bind -r L resize-pane -R 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10

# zoom
bind -r i resize-pane -Z

# chatgpt
bind g new-window 'gpt'
bind s split-pane -h 'gpt'
bind S split-pane -v 'gpt'

bind b choose-session

unbind b
bind b break-pane -t :

bind-key -r f run-shell "tmux neww ~/.config/tmux/-sessionizer"
# prevent cuttoff when resizing
set -g focus-events on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

set -g pane-border-style fg=colour2

bind t if-shell "tmux list-panes -F '#{session_name}' | grep -q 'scratch'" \
    "kill-pane -t scratch" \
    "display-popup -E -w 90% -h 90% 'tmux new-session -A -s scratch'"

# required for: https://github.com/vimpostor/vim-tpipeline
set -g focus-events on
set -g status-style bg=default
set -g status-left-length 99
set -g status-right-length 99
set -g status-justify absolute-centre

set -g status-style "fg=#859289,bg=default"
set -g @tmux_status_window_active "#e69875"
set -g @tmux_status_window_inactive "#859289"
set -g @tmux_status_window_inactive_recent "#3f5865"

##### half‑page scrolling on plain C‑u / C‑d #####
set -g @scroll_passthrough 'nvim|vim|less|git'
# C‑u  – half‑page up  
bind-key -n C-u if-shell -F '#{pane_in_mode}' \
    'send -X halfpage-up' \
    "if-shell 'echo \"#{pane_current_command}\" | grep -E \"#{@scroll_passthrough}\"' \
        'send-keys C-u' \
        'copy-mode -e; send -X halfpage-up'"
# C‑d  – half‑page down
bind-key -n C-d if-shell -F '#{pane_in_mode}' \
    'send -X halfpage-down' \
    "if-shell 'echo \"#{pane_current_command}\" | grep -E \"#{@scroll_passthrough}\"' \
        'send-keys C-d' \
        'copy-mode -e; send -X halfpage-down'"
